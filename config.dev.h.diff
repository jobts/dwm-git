diff --git a/config.def.h b/config.def.h
--- a/config.def.h
+++ b/config.def.h
@@ -8,22 +8,27 @@ static const unsigned int systrayspacing = 2;   /* systray spacing */
 static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
 static const int showsystray        = 1;     /* 0 means no systray */
 static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const int topbar             = 0;        /* 0 means bottom bar */
+static const char *fonts[]          = { "monospace:size=12" };
+static const char dmenufont[]       = "monospace:size=11";
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
+static const char col_green1[]       = "#00ff00";
+static const char col_green2[]       = "#007700";
+static const char col_blue1[]        = "#0000ff";
+static const char col_blue2[]        = "#00aaff";
+static const char col_white[]        = "#ffffff";
 static const char *colors[][3]      = {
 	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+    [SchemeNorm] = { col_gray2, col_gray3, col_gray4 },
+    [SchemeSel]  = { col_gray2, col_gray4, col_blue2 },
 };

 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "", "", "", "4", "5", "6", "7", "8", "9" };

 static const Rule rules[] = {
 	/* xprop(1):
@@ -31,10 +36,19 @@ static const Rule rules[] = {
 	 *	WM_NAME(STRING) = title
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+/*	{ "URxvt",              NULL,       NULL,       1 << 0,       0,           -1 },
+    { "Firefox",            NULL,       NULL,       1 << 1,       0,           -1 }, */
+    { "Chromium",           NULL,       NULL,       1 << 1,       0,           -1 },
+    { "Rambox",             NULL,       NULL,       1 << 2,       0,           -1 },
+    { "TelegramDesktop",    NULL,       NULL,       1 << 2,       0,           -1 },
+    { "Skype",              NULL,       NULL,       1 << 2,       0,           -1 },
+    { "Gimp",               NULL,       NULL,       0,            1,           -1 },
 };

+/* new functions includes */
+#include "gaplessgrid.c"
+#include "shiftview.c"
+
 /* layout(s) */
 static const int dirs[3]      = { DirHor, DirVer, DirVer }; /* tiling dirs */
 static const float facts[3]   = { 1.1,    1.1,    1.1 };    /* tiling facts */
@@ -46,11 +60,13 @@ static const Layout layouts[] = {
 	{ "[]=",      tile },    /* first entry is default */
 	{ "><>",      NULL },    /* no layout function means floating behavior */
 	{ "[M]",      monocle },
+	{ "###",      gaplessgrid },
 	{ NULL,       NULL },
 };

 /* key definitions */
-#define MODKEY Mod1Mask
+#define ALTKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -59,16 +75,23 @@ static const Layout layouts[] = {
 #define TILEKEYS(MOD,G,M,S) \
 	{ MOD, XK_r, setdirs,  {.v = (int[])  { INC(G * +1),   INC(M * +1),   INC(S * +1) } } }, \
 	{ MOD, XK_h, setfacts, {.v = (float[]){ INC(G * -0.1), INC(M * -0.1), INC(S * -0.1) } } }, \
-	{ MOD, XK_l, setfacts, {.v = (float[]){ INC(G * +0.1), INC(M * +0.1), INC(S * +0.1) } } },
+	{ MOD, XK_l, setfacts, {.v = (float[]){ INC(G * +0.1), INC(M * +0.1), INC(S * +0.1) } } }, \
+	{ MOD|ControlMask, XK_Left, setfacts, {.v = (float[]){ INC(G * -0.1), INC(M * -0.1), INC(S * -0.1) } } }, \
+	{ MOD|ControlMask, XK_Right, setfacts, {.v = (float[]){ INC(G * +0.1), INC(M * +0.1), INC(S * +0.1) } } },

 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
-
+// My terminal and dmenu replacement
+static const char *dmenucmd[] = { "rofi", "-show", NULL };
+static const char *termcmd[]  = { "urxvtc", NULL };
+// Volume up down mute command
+static const char *volupcmd[]  = { "pactl", "set-sink-volume", "0", "+3%", NULL };
+static const char *voldowncmd[]  = { "pactl", "set-sink-volume", "0", "-3%", NULL };
+static const char *volmute[]  = { "pactl", "set-sink-mute", "0", "toggle", NULL };
+static const char *lockcmd[]  = { "dm-tool", "lock", NULL };
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
@@ -110,6 +133,29 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+/* 	My mod keys:
+ *	Win - Arrow keys duplicates hjkl
+ * 	Volume keys:  Win - numpad + / Win- numpad -
+ *	Alt + F4 close window as usual
+ *	Win + backstick (tilda)  open terminal
+ *	Win + g gaplessgrid
+ *  Ctrl + Win + l  - light-dm lock screen      */
+	{ ALTKEY,                       XK_F2,     spawn,          {.v = dmenucmd } },
+	{ MODKEY,                       XK_Up,     focusstack,     {.i = -1 } },
+	{ MODKEY,                       XK_Down,   focusstack,     {.i = +1 } },
+	{ MODKEY,                       XK_KP_Divide,   spawn,     {.v = volmute } },
+	{ MODKEY,                       XK_KP_Add, spawn,          {.v = volupcmd } },
+	{ MODKEY,                       XK_KP_Subtract,	spawn,     {.v = voldowncmd } },
+	{ ALTKEY,                       XK_F4,     killclient,     {0} },
+	{ MODKEY,                       XK_grave,  spawn,          {.v = termcmd } },
+	{ MODKEY|ControlMask,           XK_l,      spawn,          {.v = lockcmd } },
+/* next prev tag rotate */
+	{ MODKEY,                       XK_Right,  shiftview,      { .i = +1 } },
+	{ MODKEY,                       XK_Left,   shiftview,      { .i = -1 } },
+/* end next prev tag rotate */
+/* new layouts */
+	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[3] } },
+/* end new layouts */
 };

 /* button definitions */
@@ -127,5 +173,9 @@ static Button buttons[] = {
 	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	/* next prev tag rotate */
+	{ ClkTagBar,            0,              Button4,        shiftview,     { .i = -1 } },
+	{ ClkTagBar,            0,              Button5,        shiftview,     { .i = +1 } },
+	/* end next prev tag rotate */
 };

