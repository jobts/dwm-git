diff --git a/config.def.h b/config.def.h
index 1c0b587..9ff16cc 100644
--- a/config.def.h
+++ b/config.def.h
@@ -4,22 +4,27 @@
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const int topbar             = 0;        /* 0 means bottom bar */
+static const char *fonts[]          = { "monospace:size=12" };
+static const char dmenufont[]       = "monospace:size=11";
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
+static const char col_green1[]       = "#00ff00";
+static const char col_green2[]       = "#007700";
+static const char col_blue1[]        = "#0000ff";
+static const char col_blue2[]        = "#00aaff";
+static const char col_white[]        = "#ffffff";
 static const char *colors[][3]      = {
 	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+    [SchemeNorm] = { col_gray2, col_gray3, col_gray4 },
+    [SchemeSel]  = { col_gray2, col_gray4, col_blue2 },
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "", "", "", "4", "5", "6", "7", "8", "9" };
 
 static const Rule rules[] = {
 	/* xprop(1):
@@ -27,10 +32,24 @@ static const Rule rules[] = {
 	 *	WM_NAME(STRING) = title
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+/*	{ "URxvt",              NULL,       NULL,       1 << 0,       0,           -1 },
+    { "Firefox",            NULL,       NULL,       1 << 1,       0,           -1 }, */
+    { "Chromium",           NULL,       NULL,       1 << 1,       0,           -1 },
+    { "Rambox",             NULL,       NULL,       1 << 2,       0,           -1 },
+    { "TelegramDesktop",    NULL,       NULL,       1 << 2,       0,           -1 },
+    { "Skype",              NULL,       NULL,       1 << 2,       0,           -1 },
+    { "Gimp",               NULL,       NULL,       0,            1,           -1 },
 };
 
+/* custom functions declarations */
+static void bstack(Monitor *m);
+static void bstackhoriz(Monitor *m);
+static void centeredmaster(Monitor *m);
+static void centeredfloatingmaster(Monitor *m);
+static void cyclelayout(const Arg *arg);
+static void gaplessgrid(Monitor *m);
+static void shiftview(const Arg *arg);
+
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
@@ -41,10 +60,17 @@ static const Layout layouts[] = {
 	{ "[]=",      tile },    /* first entry is default */
 	{ "><>",      NULL },    /* no layout function means floating behavior */
 	{ "[M]",      monocle },
+	{ "###",      gaplessgrid },
+	{ "TTT",      bstack },
+	{ "===",      bstackhoriz },
+	{ "|M|",      centeredmaster },
+	{ ">M>",      centeredfloatingmaster },
+	{ NULL,       NULL },	
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define ALTKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -56,9 +82,14 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
-
+// My terminal and dmenu replacement
+static const char *dmenucmd[] = { "rofi", "-show", NULL };
+static const char *termcmd[]  = { "urxvtc", NULL };
+// Volume up down mute command
+static const char *volupcmd[]  = { "pactl", "set-sink-volume", "0", "+3%", NULL };
+static const char *voldowncmd[]  = { "pactl", "set-sink-volume", "0", "-3%", NULL };
+static const char *volmute[]  = { "pactl", "set-sink-mute", "0", "toggle", NULL };
+static const char *lockcmd[]  = { "dm-tool", "lock", NULL };
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
@@ -94,6 +125,42 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+/* 	My mod keys:
+ *	Win - Arrow keys duplicates hjkl
+ * 	Volume keys:  Win - numpad + / Win- numpad -
+ *	Alt + F4 close window as usual
+ *	Win + backstick (tilda)  open terminal
+ *	Win + g gaplessgrid 
+ *  Ctrl + Win + l  - light-dm lock screen      */
+	{ ALTKEY,                       XK_F2,     spawn,          {.v = dmenucmd } },
+	{ MODKEY,                       XK_Up,     focusstack,     {.i = -1 } },
+	{ MODKEY,                       XK_Down,   focusstack,     {.i = +1 } },
+	{ MODKEY,                       XK_Left,   setmfact,       {.f = -0.05} },
+	{ MODKEY,                       XK_Right,  setmfact ,      {.f = +0.05} },
+	{ MODKEY,                       XK_KP_Divide,   spawn,     {.v = volmute } },
+	{ MODKEY,                       XK_KP_Add, spawn,          {.v = volupcmd } },
+	{ MODKEY,                       XK_KP_Subtract,	spawn,     {.v = voldowncmd } },
+	{ ALTKEY,                       XK_F4,     killclient,     {0} },
+	{ MODKEY,                       XK_grave,  spawn,          {.v = termcmd } },
+	{ MODKEY|ControlMask,           XK_l,      spawn,          {.v = lockcmd } },
+/* next prev tag rotate */
+	{ MODKEY|ControlMask,           XK_Right,          shiftview,  { .i = +1 } },
+	{ MODKEY|ControlMask,           XK_Left,           shiftview,  { .i = -1 } },
+/* end next prev tag rotate */
+/* end WINVIEW */
+/*	{ MODKEY|ControlMask,           XK_o,      winview,        {0} },*/
+/* end winview */
+/* new layouts */
+	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[3] } },
+	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[4]} },
+	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[5]} },
+	{ MODKEY,                       XK_c,      setlayout,      {.v = &layouts[6]} },
+	{ MODKEY,                       XK_v,      setlayout,      {.v = &layouts[7]} },
+	{ MODKEY|ControlMask,           XK_comma,  cyclelayout,    {.i = -1 } },
+	{ MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } },
+
+
+/* end new layouts */
 };
 
 /* button definitions */
@@ -111,5 +178,256 @@ static Button buttons[] = {
 	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	/* next prev tag rotate */
+	{ ClkTagBar,            0,              Button4,        shiftview,     { .i = -1 } },
+	{ ClkTagBar,            0,              Button5,        shiftview,     { .i = +1 } },
+	/* end next prev tag rotate */
 };
 
+/* custom functions */
+
+/** Function to shift the current view to the left/right
+ *
+ *  https://dwm.suckless.org/patches/nextprev/   mod ->
+ *  https://lists.suckless.org/dev/1104/7590.html
+ * @param: "arg->i" stores the number of tags to shift right (positive value)
+ *          or left (negative value)
+ */
+void
+shiftview(const Arg *arg) {
+	Arg shifted;
+
+	if(arg->i > 0) // left circular shift
+		shifted.ui = (selmon->tagset[selmon->seltags] << arg->i)
+		   | (selmon->tagset[selmon->seltags] >> (LENGTH(tags) - arg->i));
+
+	else // right circular shift
+		shifted.ui = selmon->tagset[selmon->seltags] >> (- arg->i)
+		   | selmon->tagset[selmon->seltags] << (LENGTH(tags) + arg->i);
+
+	view(&shifted);
+}
+
+/* gaplessgrid */
+void
+gaplessgrid(Monitor *m) {
+        unsigned int n, cols, rows, cn, rn, i, cx, cy, cw, ch;
+        Client *c;
+
+        for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++) ;
+        if(n == 0)
+                return;
+
+        /* grid dimensions */
+        for(cols = 0; cols <= n/2; cols++)
+                if(cols*cols >= n)
+                        break;
+        if(n == 5) /* set layout against the general calculation: not 1:2:2, but 2:3 */
+                cols = 2;
+        rows = n/cols;
+
+        /* window geometries */
+        cw = cols ? m->ww / cols : m->ww;
+        cn = 0; /* current column number */
+        rn = 0; /* current row number */
+        for(i = 0, c = nexttiled(m->clients); c; i++, c = nexttiled(c->next)) {
+                if(i/rows + 1 > cols - n%cols)
+                        rows = n/cols + 1;
+                ch = rows ? m->wh / rows : m->wh;
+                cx = m->wx + cn*cw;
+                cy = m->wy + rn*ch;
+                resize(c, cx, cy, cw - 2 * c->bw, ch - 2 * c->bw, False);
+                rn++;
+                if(rn >= rows) {
+                        rn = 0;
+                        cn++;
+                }
+        }
+}
+
+/* bottomstack and bottomstackhoriz */
+static void
+bstack(Monitor *m) {
+       int w, h, mh, mx, tx, ty, tw;
+       unsigned int i, n;
+       Client *c;
+
+       for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+       if (n == 0)
+               return;
+       if (n > m->nmaster) {
+               mh = m->nmaster ? m->mfact * m->wh : 0;
+               tw = m->ww / (n - m->nmaster);
+               ty = m->wy + mh;
+       } else {
+               mh = m->wh;
+               tw = m->ww;
+               ty = m->wy;
+       }
+       for (i = mx = 0, tx = m->wx, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
+               if (i < m->nmaster) {
+                       w = (m->ww - mx) / (MIN(n, m->nmaster) - i);
+                       resize(c, m->wx + mx, m->wy, w - (2 * c->bw), mh - (2 * c->bw), 0);
+                       mx += WIDTH(c);
+               } else {
+                       h = m->wh - mh;
+                       resize(c, tx, ty, tw - (2 * c->bw), h - (2 * c->bw), 0);
+                       if (tw != m->ww)
+                               tx += WIDTH(c);
+               }
+       }
+}
+
+static void
+bstackhoriz(Monitor *m) {
+       int w, mh, mx, tx, ty, th;
+       unsigned int i, n;
+       Client *c;
+
+       for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+       if (n == 0)
+               return;
+       if (n > m->nmaster) {
+               mh = m->nmaster ? m->mfact * m->wh : 0;
+               th = (m->wh - mh) / (n - m->nmaster);
+               ty = m->wy + mh;
+       } else {
+               th = mh = m->wh;
+               ty = m->wy;
+       }
+       for (i = mx = 0, tx = m->wx, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
+               if (i < m->nmaster) {
+                       w = (m->ww - mx) / (MIN(n, m->nmaster) - i);
+                       resize(c, m->wx + mx, m->wy, w - (2 * c->bw), mh - (2 * c->bw), 0);
+                       mx += WIDTH(c);
+               } else {
+                       resize(c, tx, ty, m->ww - (2 * c->bw), th - (2 * c->bw), 0);
+                       if (th != m->wh)
+                               ty += HEIGHT(c);
+               }
+       }
+}
+
+/* centeredmaster */
+void
+centeredmaster(Monitor *m)
+{
+       unsigned int i, n, h, mw, mx, my, oty, ety, tw;
+       Client *c;
+
+       /* count number of clients in the selected monitor */
+       for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+       if (n == 0)
+               return;
+
+       /* initialize areas */
+       mw = m->ww;
+       mx = 0;
+       my = 0;
+       tw = mw;
+
+       if (n > m->nmaster) {
+               /* go mfact box in the center if more than nmaster clients */
+               mw = m->nmaster ? m->ww * m->mfact : 0;
+               tw = m->ww - mw;
+
+               if (n - m->nmaster > 1) {
+                       /* only one client */
+                       mx = (m->ww - mw) / 2;
+                       tw = (m->ww - mw) / 2;
+               }
+       }
+
+       oty = 0;
+       ety = 0;
+       for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+       if (i < m->nmaster) {
+               /* nmaster clients are stacked vertically, in the center
+                * of the screen */
+               h = (m->wh - my) / (MIN(n, m->nmaster) - i);
+               resize(c, m->wx + mx, m->wy + my, mw - (2*c->bw),
+                      h - (2*c->bw), 0);
+               my += HEIGHT(c);
+       } else {
+               /* stack clients are stacked vertically */
+               if ((i - m->nmaster) % 2 ) {
+                       h = (m->wh - ety) / ( (1 + n - i) / 2);
+                       resize(c, m->wx, m->wy + ety, tw - (2*c->bw),
+                              h - (2*c->bw), 0);
+                       ety += HEIGHT(c);
+               } else {
+                       h = (m->wh - oty) / ((1 + n - i) / 2);
+                       resize(c, m->wx + mx + mw, m->wy + oty,
+                              tw - (2*c->bw), h - (2*c->bw), 0);
+                       oty += HEIGHT(c);
+               }
+       }
+}
+
+void
+centeredfloatingmaster(Monitor *m)
+{
+       unsigned int i, n, w, mh, mw, mx, mxo, my, myo, tx;
+       Client *c;
+
+       /* count number of clients in the selected monitor */
+       for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+       if (n == 0)
+               return;
+
+       /* initialize nmaster area */
+       if (n > m->nmaster) {
+               /* go mfact box in the center if more than nmaster clients */
+               if (m->ww > m->wh) {
+                       mw = m->nmaster ? m->ww * m->mfact : 0;
+                       mh = m->nmaster ? m->wh * 0.9 : 0;
+               } else {
+                       mh = m->nmaster ? m->wh * m->mfact : 0;
+                       mw = m->nmaster ? m->ww * 0.9 : 0;
+               }
+               mx = mxo = (m->ww - mw) / 2;
+               my = myo = (m->wh - mh) / 2;
+       } else {
+               /* go fullscreen if all clients are in the master area */
+               mh = m->wh;
+               mw = m->ww;
+               mx = mxo = 0;
+               my = myo = 0;
+       }
+
+       for(i = tx = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+       if (i < m->nmaster) {
+               /* nmaster clients are stacked horizontally, in the center
+                * of the screen */
+               w = (mw + mxo - mx) / (MIN(n, m->nmaster) - i);
+               resize(c, m->wx + mx, m->wy + my, w - (2*c->bw),
+                      mh - (2*c->bw), 0);
+               mx += WIDTH(c);
+       } else {
+               /* stack clients are stacked horizontally */
+               w = (m->ww - tx) / (n - i);
+               resize(c, m->wx + tx, m->wy, w - (2*c->bw),
+                      m->wh - (2*c->bw), 0);
+               tx += WIDTH(c);
+       }
+}
+
+/* cyclelayout */
+
+void
+cyclelayout(const Arg *arg) {
+       Layout *l;
+       for(l = (Layout *)layouts; l != selmon->lt[selmon->sellt]; l++);
+       if(arg->i > 0) {
+               if(l->symbol && (l + 1)->symbol)
+                       setlayout(&((Arg) { .v = (l + 1) }));
+               else
+                       setlayout(&((Arg) { .v = layouts }));
+       } else {
+               if(l != layouts && (l - 1)->symbol)
+                       setlayout(&((Arg) { .v = (l - 1) }));
+               else
+                       setlayout(&((Arg) { .v = &layouts[LENGTH(layouts) - 2] }));
+       }
+}
+
